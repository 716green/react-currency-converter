{"ast":null,"code":"var _jsxFileName = \"/home/bob/Documents/Programming/React/react-currency-converter/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CurrencyRow from './CurrencyRow';\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest';\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\n  let toAmount, fromAmount;\n\n  if (amountInFromCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL).then(res => res.json()).then(data => {\n      const firstCurrency = Object.keys(data.rates)[0];\n      setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n      setFromCurrency(data.base);\n      setToCurrency(firstCurrency);\n      setExchangeRate(data.rates[firstCurrency]);\n    });\n  }, []);\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`).then(res => res.json()).then(data => setExchangeRate(data.rates[toCurrency]));\n    }\n  }, [fromCurrency, toCurrency]);\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(false);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Convert\"), React.createElement(CurrencyRow, {\n    currencyOptions: currencyOptions,\n    selectedCurrency: fromCurrency,\n    onChangeCurrency: e => setFromCurrency(e.target.value),\n    onChangeAmount: handleFromAmountChange,\n    amount: fromAmount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"equals\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"=\"), React.createElement(CurrencyRow, {\n    currencyOptions: currencyOptions,\n    selectedCurrency: toCurrency,\n    onChangeCurrency: e => setToCurrency(e.target.value),\n    onChangeAmount: handleToAmountChange,\n    amount: toAmount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/bob/Documents/Programming/React/react-currency-converter/src/App.js"],"names":["React","useEffect","useState","CurrencyRow","BASE_URL","App","currencyOptions","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","amount","setAmount","amountInFromCurrency","setAmountInFromCurrency","toAmount","fromAmount","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","handleFromAmountChange","e","target","value","handleToAmountChange"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CurrencyRow from './CurrencyRow'\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [fromCurrency, setFromCurrency] = useState()\n  const [toCurrency, setToCurrency] = useState()\n  const [exchangeRate, setExchangeRate] = useState()\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[0]\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n  return (\n    <>\n      <h1>Convert</h1>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <div className=\"equals\">=</div>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n    </>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}